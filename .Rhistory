folder = '~/Documents/BSynch/'
cc <- read.table(paste0(folder,'IntCal20.txt'),header = TRUE)
folder = '~/Documents/BSynch/Uq_cc/'
cc <- read.table(paste0(folder,'IntCal20.txt'),header = TRUE)
test_data <- read.table(paste0(folder, 'Cariaco_14C.txt'),header=TRUE )
up_lim <- approx(cc[,2] + 3 *cc[,3], cc[,1]   , test_data[,2] - 3*test_data[,3] )$y
depth_to_check <- test_data[,1] * 100
up_lim
plot(depth_to_check,up_lim)
Input='input'
Target='target'
inp <- load_file_from_folder(Input, folder)
# Scales the data in the range of [-1,1]
range <- function(x){
2*(x-min(x))/(max(x)-min(x))-1
}
# Student t distribution
tdistro <- function(X, Mu, sigma, a, b){
sigma = sigma^2
-1 * sum(( ((2*a+1.)/2.) * log(b + ((X - Mu)^2.)/(2.*sigma)) + .5 * log(sigma) ),na.rm = TRUE)
}
t_dis <- function(X, Mu, sigma, a, b){
(  (b + ((X - Mu)^2.)/(2.*sigma^2))^(-(2*a+1.)/2.) ) *  (sigma)
}
# Data loader
load_file_from_folder <- function(file_name, folder) {
message(paste0("Getting data from '", file_name, "'...\n"))
# Check for .csv extension
csv_path <- paste0(folder, file_name, ".csv")
if (file.exists(csv_path)) {
fil <- read.csv(csv_path)
# Validate columns and headers
if(ncol(fil) != 3) {
stop("CSV file does not have 3 columns")
}
if(!identical(names(fil), c("Depth", "Age", "ProxyValue"))) {
names(fil) <- c("Depth", "Age", "ProxyValue")
warning("CSV file headers modified to match required format")
}
return(fil)
}else{
# Check for .txt extension
txt_path <- paste0(folder, file_name, ".txt")
if (file.exists(txt_path)) {
fil <- read.table(txt_path, header = TRUE, sep = "\t")
# Validate columns and headers
if(ncol(fil) != 3) {
stop("TXT file does not have 3 columns")
}
if(!identical(names(fil), c("Depth", "Age", "ProxyValue"))) {
names(fil) <- c("Depth", "Age", "ProxyValue")
warning("TXT file headers modified to match required format")
}
}
return(fil)
}
# Return NULL with warning if no matching file
warning("No matching file found for the given input in the specified folder.")
return(NULL)
}
# Load twalk
source_twalk <- function(folder) {
# Construct the path to the twalk.R file in the specified folder
twalk_path <- paste0(folder, "..", "/twalk.R")
# Check if the twalk.R file exists in the specified folder
if (file.exists(twalk_path)) {
source(twalk_path)
message("Successfully loaded 'twalk.R' from", folder, "directory.\n")
} else {
warning("File twalk.R was not found in the specified folder.")
}
}
# Load or install dependencies
load_or_install_dependencies <- function() {
if (!require(KernSmooth, quietly = TRUE)) {
message("KernSmooth not found. Installing...\n")
install.packages("KernSmooth", dependencies = TRUE)
# Load after installing
library(KernSmooth)
message("KernSmooth installed and loaded successfully!\n")
} else {
message("KernSmooth loaded successfully!\n")
}
if (!require(coda, quietly = TRUE)) {
message("coda not found. Installing...\n")
install.packages("coda", dependencies = TRUE)
# Load after installing
library(coda)
message("coda installed and loaded successfully!\n")
} else {
message("coda loaded successfully!\n")
}
}
# target function as preparation
target_density <-function(tar_ages,tar,bw = 0.05){
# Initialize an empty list to store the density objects for each depth
kde_list <- list()
# Loop through each column (depth) to calculate the kernel density
for (col in 1:length(tar_ages)) {
values_at_depth <- tar[,col]
# Compute kernel density and add to the list
kde <- density(values_at_depth, kernel = 'gaussian',bw =bw )
kde$x <- c(-.Machine$double.xmax,kde$x,.Machine$double.xmax)
kde$y <- c(.Machine$double.xmin,kde$y+1e-200,.Machine$double.xmin  )
kde$y <- log(kde$y)
kde_list[[col]] <- kde
# print(kde$bw)
}
return(kde_list)
}
# Plot the density
density_plot <- function(tar_ages, tar_mt,xlabel,ylabel = "proxy units",add = FALSE,axis=TRUE,flip=FALSE){
tar_ages_bw <- tar_ages[2] - tar_ages[1]
if (!add){
if(axis){
if (flip){
plot(colMeans(tar_mt),tar_ages , type='l', xlab=ylabel, ylab=xlabel, ylim=c( tar_ages[1],tail(tar_ages,1)),col=rgb(0,0,0,1))
}else{
plot(tar_ages,colMeans(tar_mt) , type='l', xlab=xlabel, ylab=ylabel, xlim=c( tar_ages[1],tail(tar_ages,1)),col=rgb(0,0,0,1))
}
}else{
if (flip){
plot(colMeans(tar_mt),tar_ages , type='l', ylab=xlabel, xlab=ylabel, ylim=c( tar_ages[1],tail(tar_ages,1)),col=rgb(0,0,0,1),xaxt = 'n')
}else{
plot(tar_ages,colMeans(tar_mt) , type='l', xlab=xlabel, ylab=ylabel, xlim=c( tar_ages[1],tail(tar_ages,1)),col=rgb(0,0,0,1),xaxt = 'n')
}
}
}else{
if (flip){
lines(colMeans(tar_mt),tar_ages ,col=rgb(0,0,0,1))
}else{
lines(tar_ages,colMeans(tar_mt) ,col=rgb(0,0,0,1))
}
}
for(i in 1:ncol(tar_mt) ){
h <- hist(tar_mt[,i], plot = FALSE,breaks=150)
cols <- gray(1-h$counts/max(h$counts),alpha = .4)
# Plot non-zero rects
if (flip){
rect(ybottom = tar_ages[i], ytop = tar_ages[i]+tar_ages_bw,
xleft = h$breaks[-1], #head(h$breaks, -1),
xright = head(h$breaks, -1),# h$breaks[-1],
col = cols, border = NA)
}else{
rect(xleft = tar_ages[i], xright = tar_ages[i]+tar_ages_bw,
ybottom = h$breaks[-1], #head(h$breaks, -1),
ytop = head(h$breaks, -1),# h$breaks[-1],
col = cols, border = NA)
}
}
}
#### Load input ####
inp <- load_file_from_folder(Input, folder)
if (depth_cm){
depth <- inp$Depth
}else{
inp$Depth <- inp$Depth * 100
depth <- inp$Depth
}
inp$Depth <- inp$Depth * 100
depth <- inp$Depth
org_time <- inp$Age
inp <- data.frame(X=inp$Age,ProxyValue = inp$ProxyValue)
xlabel = "Age"
age_temp <- inp$X * 1000
org_time <- inp$Age
inp <- data.frame(X=inp$Age,ProxyValue = inp$ProxyValue)
implicitGeneric()
inp
tar <- read.table(paste0(folder,Target,'.txt'),header = T)
tar <- as.matrix(tar)
# Divide the data base into the ages and the iterations
tar_ages <- tar[,1]
tar <- t(tar[,-1]) # invert the matrix
tar_mt <- tar
# create the density function.
kde_list <- target_density(tar_ages,tar) # target
# localizador is the function which tell the target_densities function which density to use
localizador <- function(x)(approx(tar_ages,seq(1,length(tar_ages)),method = 'constant',xout = x)$y)
# Create a data frame with depth and mean
tar <- data.frame(X = as.numeric(tar_ages), ProxyValue =as.numeric(colMeans(tar)) )
tar
inp$Depth
inp$Depth <- inp$Depth * 100
inp
#### Load input ####
inp <- load_file_from_folder(Input, folder)
inp$Depth <- inp$Depth * 100
depth <- inp$Depth
inp$Depth
plot(depth_to_check,up_lim)
up_lim[1]
up_lim[1:10]
max(up_lim[1:10])
lm (formula = (up_lim+50) ~ depth_to_check  )
lm (formula = (up_lim+50) ~ depth_to_check  )$Coefficients
lm(formula = (up_lim+50) ~ depth_to_check  )$Coefficients
slopes <- lm(formula = (up_lim+50) ~ depth_to_check  )
slopes
slopes['']
slopes$coefficients[2]
as.numeric(slopes$coefficients[2])
ceiling(as.numeric(slopes$coefficients[2]))
indx2 <-  which(breaks<=tail(depth_to_check,1)[1]
)
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
output = BSynch(Input='input',Target='target',folder = '~/Documents/BSynch/Uq_cc/',
n_sections = 35,
thin=5,burn=2e+1,iters=2.5e+2,
shape_acc = 50,  mean_acc = 20,
strength_mem = 10, mean_mem = .5,
depth_cm = FALSE,depth_to_age = TRUE,
age_kyr = TRUE,continue_run = T,
cc_limit = TRUE,
verify_orientation = FALSE,flip_orientation = TRUE  )
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/Biscut/Biscuit.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
sample(1:30,10)
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
output = BSynch(Input='input',Target='target',folder = '~/Documents/BSynch/Uq_cc/',
n_sections = 35,
thin=25,burn=1e+3,iters=1.5e+3,
shape_acc = 20,  mean_acc = 20,
strength_mem = 10, mean_mem = .5,
depth_cm = FALSE,depth_to_age = TRUE,
age_kyr = TRUE,continue_run = T,
cc_limit = TRUE,
verify_orientation = FALSE,flip_orientation = TRUE  )
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
par(mar=c(1))
par(mfrow = c(1))
par(mfrow = c(1,1))
source("~/GitHub/BSynch/BSynch.R")
?uniroot
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
source("~/GitHub/BSynch/BSynch.R")
